{
	"info": {
		"_postman_id": "bc21c5f4-7249-4682-9882-d0b87d3ded52",
		"name": "Books_API_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30401768",
		"_collection_link": "https://www.postman.com/nolakkapali/workspace/nolak-s-workspace/collection/30401768-bc21c5f4-7249-4682-9882-d0b87d3ded52?action=share&source=collection_link&creator=30401768"
	},
	"item": [
		{
			"name": "Filtered List of Books",
			"item": [
				{
					"name": "Type(fiction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Response Body Values\r",
									"pm.test(\"Validate Response Body Has Correct Value\", () => {\r",
									"    let arr = [\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"The Russian\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 3,\r",
									"            \"name\": \"The Vanishing Half\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 4,\r",
									"            \"name\": \"The Midnight Library\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 6,\r",
									"            \"name\": \"Viscount Who Loved Me\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        }\r",
									"    ];\r",
									"let book_data=pm.response.json();//Response is stored in book_data variable\r",
									"    arr.forEach (arr_list => {\r",
									"        if (arr_list.id === book_data.id) {\r",
									"            // pm.expect(book_data[i].id).to.eql(arr[i].id);\r",
									"            pm.expect(book_data.name).to.eql(arr_list.name);\r",
									"            pm.expect(book_data.type).to.eql(arr_list.type);\r",
									"            pm.expect(book_data.available).to.eql(arr_list.available);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?type=fiction",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction",
									"description": "Shows fictional books"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type(non-fiction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Response Body Values\r",
									"pm.test(\"Validate Response Body Has Correct Value\", () => {\r",
									"    let arr = [\r",
									"     {\r",
									"        \"id\": 2,\r",
									"        \"name\": \"Just as I Am\",\r",
									"        \"type\": \"non-fiction\",\r",
									"        \"available\": false\r",
									"     },\r",
									"     {\r",
									"        \"id\": 5,\r",
									"        \"name\": \"Untamed\",\r",
									"        \"type\": \"non-fiction\",\r",
									"        \"available\": true\r",
									"     }\r",
									"    ];\r",
									"let book_data=pm.response.json();//Response is stored in book_data variable\r",
									"    arr.forEach (arr_list => {\r",
									"        if (arr_list.id === book_data.id) {\r",
									"            // pm.expect(book_data[i].id).to.eql(arr[i].id);\r",
									"            pm.expect(book_data.name).to.eql(arr_list.name);\r",
									"            pm.expect(book_data.type).to.eql(arr_list.type);\r",
									"            pm.expect(book_data.available).to.eql(arr_list.available);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?type=non-fiction",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction",
									"description": "Shows non-fictional books"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Available-true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Body Has Correct Value\", () => {\r",
									"    let arr = [\r",
									"        {\r",
									"            \"id\": 1,\r",
									"            \"name\": \"The Russian\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 3,\r",
									"            \"name\": \"The Vanishing Half\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 4,\r",
									"            \"name\": \"The Midnight Library\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 5,\r",
									"            \"name\": \"Untamed\",\r",
									"            \"type\": \"non-fiction\",\r",
									"            \"available\": true\r",
									"        },\r",
									"        {\r",
									"            \"id\": 6,\r",
									"            \"name\": \"Viscount Who Loved Me\",\r",
									"            \"type\": \"fiction\",\r",
									"            \"available\": true\r",
									"        }\r",
									"    ];\r",
									"let book_data=pm.response.json();//Response is stored in book_data variable\r",
									"    for (let i = 0; i < arr.length; i++) {\r",
									"        if (book_data[i].available=== \"true\") {\r",
									"            pm.expect(book_data[i].id).to.eql(arr[i].id);\r",
									"            pm.expect(book_data[i].name).to.eql(arr[i].name);\r",
									"            pm.expect(book_data[i].type).to.eql(arr[i].type);\r",
									"            pm.expect(book_data[i].available).to.eql(arr[i].available);\r",
									"        }\r",
									"        else if(book_data[i].available===\"false\"){\r",
									"            \r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?available=true",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "available",
									"value": "true",
									"description": "Shows available books"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Available-false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Body Has Correct Value\", () => {\r",
									"    let arr = [\r",
									"        {\r",
									"            \"id\": 2,\r",
									"            \"name\": \"Just as I Am\",\r",
									"            \"type\": \"non-fiction\",\r",
									"            \"available\": false\r",
									"        }\r",
									"    ];\r",
									"let book_data=pm.response.json();//Response is stored in book_data variable\r",
									"    if (arr[0].id === book_data[0].id) {\r",
									"        pm.expect(book_data[0].id).to.eql(arr[0].id);\r",
									"        pm.expect(book_data[0].name).to.eql(arr[0].name);\r",
									"        pm.expect(book_data[0].type).to.eql(arr[0].type);\r",
									"        pm.expect(book_data[0].available).to.eql(arr[0].available);\r",
									"        \r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?available=false",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "available",
									"value": "false",
									"description": "Shows non-available books"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"//Check Status Code Should be 200\r",
							"pm.test(\"Status Code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"OK\"\r",
							"pm.test(\"Status Name is OK\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"//Check Response Body Data Types\r",
							"const book_data = pm.response.json();\r",
							"pm.test(\"Test Response Body data type\", () =>\r",
							"{\r",
							"    pm.expect(book_data).to.be.an(\"array\");\r",
							"    book_data.forEach(book => {\r",
							"        pm.expect(book.id).to.be.a(\"number\");\r",
							"        pm.expect(book.name).to.be.a(\"string\");\r",
							"        pm.expect(book.type).to.be.a(\"string\");\r",
							"        pm.expect(book.available).to.be.a(\"boolean\");\r",
							"    });\r",
							"});\r",
							"\r",
							"//Validate JSON Schema\r",
							"let response=[\r",
							"{\r",
							"    \"id\": Number,\r",
							"    \"name\": String,\r",
							"    \"type\":String,\r",
							"    \"available\":Boolean\r",
							"}];\r",
							"let book_schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"name\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"type\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"available\": {\r",
							"        \"type\": \"boolean\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"id\",\r",
							"      \"name\",\r",
							"      \"type\",\r",
							"      \"available\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"// Updated JSON Schema validation test\r",
							"pm.test(\"Validate JSON Schema\",() =>\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(book_schema);\r",
							"}\r",
							");\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "View API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 200\r",
							"pm.test(\"Status Code is 200\",() =>\r",
							"{\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"OK\"\r",
							"pm.test(\"Status Name is OK\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"pm.test(\"Response Header Has Proper Value\",() =>\r",
							"{\r",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"}\r",
							");\r",
							"\r",
							"//Check Response Body\r",
							"let api_status=pm.response.json();\r",
							"pm.test(\"Response Body Has Correct Value\", () =>\r",
							"{\r",
							" pm.expect(api_status.status).to.eql(\"OK\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/status",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "View List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 200\r",
							"pm.test(\"Status Code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"OK\"\r",
							"pm.test(\"Status Name is OK\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"//Check Response Body Data Types\r",
							"const book_data = pm.response.json();\r",
							"pm.test(\"Test Response Body data type\", () =>\r",
							"{\r",
							"    pm.expect(book_data).to.be.an(\"array\");\r",
							"    book_data.forEach(book => {\r",
							"        pm.expect(book.id).to.be.a(\"number\");\r",
							"        pm.expect(book.name).to.be.a(\"string\");\r",
							"        pm.expect(book.type).to.be.a(\"string\");\r",
							"        pm.expect(book.available).to.be.a(\"boolean\");\r",
							"    });\r",
							"});\r",
							"\r",
							"//Validate JSON Schema\r",
							"let response=[\r",
							"{\r",
							"    \"id\": Number,\r",
							"    \"name\": String,\r",
							"    \"type\":String,\r",
							"    \"available\":Boolean\r",
							"}];\r",
							"let book_schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"name\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"type\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"available\": {\r",
							"        \"type\": \"boolean\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"id\",\r",
							"      \"name\",\r",
							"      \"type\",\r",
							"      \"available\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"//JSON Schema validation test\r",
							"pm.test(\"Validate JSON Schema\",() =>\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(book_schema);\r",
							"}\r",
							");\r",
							"//Validate Response Body Values\r",
							"//Response is stored in book_data variable\r",
							"pm.test(\"Response Body Has Correct Value\", () => {\r",
							"    let arr = [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"            \"name\": \"The Russian\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"            \"name\": \"Just as I Am\",\r",
							"            \"type\": \"non-fiction\",\r",
							"            \"available\": false\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"            \"name\": \"The Vanishing Half\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"            \"name\": \"The Midnight Library\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"            \"name\": \"Untamed\",\r",
							"            \"type\": \"non-fiction\",\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"            \"name\": \"Viscount Who Loved Me\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"available\": true\r",
							"        }\r",
							"    ];\r",
							"\r",
							"    for (let i = 0; i < arr.length; i++) {\r",
							"        if (arr[i].id === book_data[i].id) {\r",
							"            pm.expect(book_data[i].id).to.eql(arr[i].id);\r",
							"            pm.expect(book_data[i].name).to.eql(arr[i].name);\r",
							"            pm.expect(book_data[i].type).to.eql(arr[i].type);\r",
							"            pm.expect(book_data[i].available).to.eql(arr[i].available);\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Single Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 200\r",
							"pm.test(\"Status Code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"OK\"\r",
							"pm.test(\"Status Name is OK\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"//Check Response Body Data Types\r",
							"const book_data = pm.response.json();\r",
							"pm.test(\"Test Response Body data type\", () =>\r",
							"{\r",
							"    pm.expect(book_data).to.be.an(\"object\");\r",
							"    pm.expect(book_data.id).to.be.a(\"number\");\r",
							"    pm.expect(book_data.name).to.be.a(\"string\");\r",
							"    pm.expect(book_data.author).to.be.a(\"string\");\r",
							"    if (Object.hasOwn(book_data,\"isbn\"))\r",
							"    { \r",
							"        pm.expect(book_data.isbn).to.be.a(\"string\");\r",
							"    }\r",
							"    pm.expect(book_data.type).to.be.a(\"string\");\r",
							"    pm.expect(book_data.price).to.be.a(\"number\");\r",
							"    pm.expect(book_data[\"current-stock\"]).to.be.a(\"number\");\r",
							"    pm.expect(book_data.available).to.be.a(\"boolean\");\r",
							"   \r",
							"});\r",
							"\r",
							"//Validate JSON Schema\r",
							"let response=[\r",
							"{\r",
							"    \"id\": Number,\r",
							"    \"name\": String,\r",
							"    \"author\":String,\r",
							"    \"type\":String,\r",
							"    \"price\":Number,\r",
							"    \"current-stock\":Number,\r",
							"    \"available\":Boolean\r",
							"}];\r",
							"let book_schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"author\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"current-stock\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"available\": {\r",
							"      \"type\": \"boolean\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"author\",\r",
							"    \"type\",\r",
							"    \"price\",\r",
							"    \"current-stock\",\r",
							"    \"available\"\r",
							"  ]\r",
							"}\r",
							" \r",
							"// JSON Schema validation test\r",
							"pm.test(\"Validate JSON Schema\",() =>\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(book_schema);\r",
							"}\r",
							");\r",
							"//Validate Response Body Values\r",
							"//Response is stored in book_data variable\r",
							"pm.test(\"Response Body Has Correct Value\", () => {\r",
							"    let arr = [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"            \"name\": \"The Russian\",\r",
							"            \"author\": \"James Patterson and James O. Born\",\r",
							"            \"isbn\": \"1780899475\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"price\": 12.98,\r",
							"            \"current-stock\": 12,\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"            \"name\": \"Just as I Am\",\r",
							"            \"author\": \"Cicely Tyson\",\r",
							"            \"type\": \"non-fiction\",\r",
							"            \"price\": 20.33,\r",
							"            \"current-stock\": 0,\r",
							"            \"available\": false\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"            \"name\": \"The Vanishing Half\",\r",
							"            \"author\": \"Brit Bennett\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"price\": 16.2,\r",
							"            \"current-stock\": 987,\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"            \"name\": \"The Midnight Library\",\r",
							"            \"author\": \"Matt Haig\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"price\": 15.6,\r",
							"            \"current-stock\": 87,\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"            \"name\": \"Untamed\",\r",
							"            \"author\": \"Glennon Doyle\",\r",
							"            \"type\": \"non-fiction\",\r",
							"            \"price\": 15.5,\r",
							"            \"current-stock\": 20,\r",
							"            \"available\": true\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"            \"name\": \"Viscount Who Loved Me\",\r",
							"            \"author\": \"Julia Quinn\",\r",
							"            \"type\": \"fiction\",\r",
							"            \"price\": 15.6,\r",
							"            \"current-stock\": 1021,\r",
							"            \"available\": true\r",
							"        }\r",
							"    ];\r",
							" \r",
							"    arr.forEach (book => {\r",
							"        \r",
							"        if (book.id===book_data.id) {\r",
							"            pm.expect(book_data.name).to.eql(book.name);\r",
							"            pm.expect(book_data.author).to.eql(book.author);\r",
							"            if (Object.hasOwn(book_data,\"isbn\"))\r",
							"            { \r",
							"             pm.expect(book_data.isbn).to.eql(book.isbn);\r",
							"            }\r",
							"            pm.expect(book_data.type).to.eql(book.type);\r",
							"            pm.expect(book_data.price).to.eql(book.price);\r",
							"            pm.expect(book_data[\"current-stock\"]).to.eql(book[\"current-stock\"]);\r",
							"            pm.expect(book_data.available).to.eql(book.available);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books/:bookId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Token Generate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Store Token Value as Collection Variable\r",
							"let token=pm.response.json();\r",
							"pm.collectionVariables.set(\"token\",token.accessToken);\r",
							"\r",
							"//Check Status Code Should be 201\r",
							"pm.test(\"Status Code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Created\"\r",
							"pm.test(\"Status Name is Created\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//steps to make client name and client email dynamic to generate token value\r",
							"//stroring random words in name variable\r",
							"let random =Math.random().toString(36).substring(2);\r",
							"//concatenating with random_char variable to generate dynamic values of cemail and cname\r",
							"let cmail= \"Rani\"+random+\"@gmail.com\";\r",
							"let cname= \"Rani\"+random;\r",
							"//making cemail and cname environment variable\r",
							"pm.environment.set(\"client_email\",cmail);\r",
							"pm.environment.set(\"client_name\",cname);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{client_name}}\",\r\n   \"clientEmail\": \"{{client_email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit A Book Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Storing Response Value\r",
							"let get_orderID=pm.response.json();\r",
							"//Collection Variable Creation to Store Order ID\r",
							"pm.collectionVariables.set(\"GetOrder_ID\",get_orderID.orderId);\r",
							"\r",
							"//Check Status Code Should be 201\r",
							"pm.test(\"Status Code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Created\"\r",
							"pm.test(\"Status Name is Created\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Order Submission\r",
							"//Store Response Value\r",
							"let order_info=pm.response.json();\r",
							"pm.test(\"Validate Order Submission\",() =>\r",
							"{\r",
							"  pm.expect(order_info.created).to.eql(true);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\":{{BookID}},\r\n  \"customerName\":\"{{CustomerName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Without Authentication Book Order Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 401\r",
							"pm.test(\"Status Code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Unauthorized\"\r",
							"pm.test(\"Status Name is Unauthorized\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"let order_info = pm.response.json();\r",
							"pm.test(\"Check Response Body\", () => {\r",
							"    pm.expect(order_info.error).to.eql(\"Missing Authorization header.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\":{{BookID}},\r\n  \"customerName\": \"{{CustomerName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "View List of Book Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 200\r",
							"pm.test(\"Status Code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"OK\"\r",
							"pm.test(\"Status Name is OK\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"//Check Response Body Data Types\r",
							"const book_data = pm.response.json();\r",
							"pm.test(\"Test Response Body data type\", () =>\r",
							"{\r",
							"    book_data.forEach((data) => {\r",
							"        pm.expect(data.id).to.be.a(\"string\");\r",
							"        pm.expect(data.bookId).to.be.a(\"number\");\r",
							"        pm.expect(data.customerName).to.be.a(\"string\");\r",
							"        pm.expect(data.createdBy).to.be.a(\"string\");\r",
							"        pm.expect(data.quantity).to.be.a(\"number\");\r",
							"        pm.expect(data.timestamp).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"//Validate JSON Schema\r",
							"let response=[\r",
							"{\r",
							"    \"id\": String,\r",
							"    \"bookId\": Number,\r",
							"    \"customerName\": String,\r",
							"    \"createdBy\": String,\r",
							"    \"quantity\":Number,\r",
							"    \"timestamp\":Number,\r",
							"}];\r",
							"let book_schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"bookId\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"customerName\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"createdBy\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"quantity\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"timestamp\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"id\",\r",
							"      \"bookId\",\r",
							"      \"customerName\",\r",
							"      \"createdBy\",\r",
							"      \"quantity\",\r",
							"      \"timestamp\"\r",
							"    ]\r",
							"  } \r",
							"  }\r",
							"// JSON Schema validation test\r",
							"pm.test(\"Validate JSON Schema\",() =>\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(book_schema);\r",
							"}\r",
							");\r",
							"//Validate Response Body Values(BookID is within the list)\r",
							"//Response is stored in book_data variable\r",
							"pm.test(\"Response Body Has Correct Value\", () => {\r",
							"    let arr_bookID = [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"        }\r",
							"    ];\r",
							" \r",
							"    arr_bookID.forEach (book => {\r",
							"        \r",
							"        if (book.id===book_data.bookId) {\r",
							"            console.log(\"Book ID is within the List of Books\");\r",
							"        }\r",
							"    });\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "View List of Book Orders Without Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 401\r",
							"pm.test(\"Status Code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Unauthorized\"\r",
							"pm.test(\"Status Name is Unauthorized\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"let order_info = pm.response.json();\r",
							"pm.test(\"Check Response Body\", () => {\r",
							"    pm.expect(order_info.error).to.eql(\"Missing Authorization header.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Used Value Token Generation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 409\r",
							"pm.test(\"Status Code is 409\", () => {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Conflict\"\r",
							"pm.test(\"Status Name is Conflict\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"Conflict\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body Value\r",
							"const book_data = pm.response.json();\r",
							"pm.test(\"Test Response Body Value\", () =>\r",
							"{\r",
							"    pm.expect(book_data.error).to.eql(\"API client already registered. Try a different email.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{client_name}}\",\r\n   \"clientEmail\": \"{{client_email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/api-clients/",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "View A Book Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 200\r",
							"pm.test(\"Status Code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"OK\"\r",
							"pm.test(\"Status Name is OK\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"//Check Response Body Data Types\r",
							"const book_data = pm.response.json();\r",
							"pm.test(\"Test Response Body data type\", () =>\r",
							"{\r",
							"    pm.expect(book_data).to.be.an(\"object\");\r",
							"    pm.expect(book_data.id).to.be.a(\"string\");\r",
							"    pm.expect(book_data.bookId).to.be.a(\"number\");\r",
							"    pm.expect(book_data.customerName).to.be.a(\"string\");\r",
							"    pm.expect(book_data.createdBy).to.be.a(\"string\");\r",
							"    pm.expect(book_data.quantity).to.be.a(\"number\");\r",
							"    pm.expect(book_data.timestamp).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"//Validate JSON Schema\r",
							"let response=[\r",
							"{\r",
							"    \"id\": String,\r",
							"    \"bookId\": Number,\r",
							"    \"customerName\": String,\r",
							"    \"createdBy\": String,\r",
							"    \"quantity\":Number,\r",
							"    \"timestamp\":Number,\r",
							"}];\r",
							"let book_schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"bookId\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"customerName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"createdBy\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"quantity\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"timestamp\": {\r",
							"      \"type\": \"number\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"bookId\",\r",
							"    \"customerName\",\r",
							"    \"createdBy\",\r",
							"    \"quantity\",\r",
							"    \"timestamp\"\r",
							"  ]\r",
							"} \r",
							"// JSON Schema validation test\r",
							"pm.test(\"Validate JSON Schema\",() =>\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(book_schema);\r",
							"}\r",
							");\r",
							"//Validate Response Body Values(BookID is within the list of books)\r",
							"//Response is stored in book_data variable\r",
							"pm.test(\"Response Body Has Correct Value\", () => {\r",
							"    let arr_bookID = [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"        }\r",
							"    ];\r",
							" \r",
							"    arr_bookID.forEach (book => {\r",
							"        \r",
							"        if (book.id===book_data.bookId) {\r",
							"            console.log(\"Book ID is within the List of Books\");\r",
							"        }\r",
							"    });\r",
							"    \r",
							"   \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{GetOrder_ID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{GetOrder_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "View A Book Order Without Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Store Order ID as Collection Variable\r",
							"let order = pm.response.json();\r",
							"pm.collectionVariables.set(\"Order_ID\", order.orderId);\r",
							"\r",
							"//Check Status Code Should be 401\r",
							"pm.test(\"Status Code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Unauthorized\"\r",
							"pm.test(\"Status Name is Unauthorized\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"let order_info = pm.response.json();\r",
							"pm.test(\"Check Response Body\", () => {\r",
							"    pm.expect(order_info.error).to.eql(\"Missing Authorization header.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{GetOrder_ID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{GetOrder_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update A Book order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 204\r",
							"pm.test(\"Status Code is 204\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"No Content\"\r",
							"pm.test(\"Status Name is No Content\",() =>\r",
							"{\r",
							"pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\":\"{{UpdatedName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{GetOrder_ID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{GetOrder_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update A Book Order Without Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Store Order ID as Collection Variable\r",
							"let order = pm.response.json();\r",
							"pm.collectionVariables.set(\"Order_ID\", order.orderId);\r",
							"\r",
							"//Check Status Code Should be 401\r",
							"pm.test(\"Status Code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Unauthorized\"\r",
							"pm.test(\"Status Name is Unauthorized\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"//Check Header Value\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"let order_info = pm.response.json();\r",
							"pm.test(\"Check Response Body\", () => {\r",
							"    pm.expect(order_info.error).to.eql(\"Missing Authorization header.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\":\"{{UpdatedName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{GetOrder_ID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{GetOrder_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete An Order Without Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Check Status Code Should be 401\r",
							"pm.test(\"Status Code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Unauthorized\"\r",
							"pm.test(\"Status Name is Unauthorized\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"//Check Response Body\r",
							"let order_info = pm.response.json();\r",
							"pm.test(\"Check Response Body\", () => {\r",
							"    pm.expect(order_info.error).to.eql(\"Missing Authorization header.\");\r",
							"});\r",
							"\r",
							"//Delete Collection Variables\r",
							"pm.collectionVariables.unset(\"Order_ID\");\r",
							"pm.collectionVariables.unset(\"token\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{GetOrder_ID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{GetOrder_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete An Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Deleting all the collection variables\r",
							"pm.collectionVariables.unset(\"GetOrder_ID\");\r",
							"pm.collectionVariables.unset(\"token\");\r",
							"\r",
							"//Check Status Code Should be 401\r",
							"pm.test(\"Status Code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//Check Status Name Should be \"Unauthorized\"\r",
							"pm.test(\"Status Name is Unauthorized\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"//Check Response Headers\r",
							"//check Response(Content-Type)Header Presence \r",
							"pm.test(\"Content-Type header is present\", () =>\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"}\r",
							");\r",
							"pm.test(\"Response Header Has Proper Value\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/{{GetOrder_ID}}",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"{{GetOrder_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}